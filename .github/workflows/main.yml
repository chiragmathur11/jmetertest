name: main
on:   
  push:
    branches: [ "main" ]
  pull_request:
   branches: [ "main" ]
jobs:
  a:
    name: a
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v4
      - name: Create sanity directory
        run: mkdir sanity
      - name: Sanity
        uses: QAInsights/PerfAction@v5.6.2
        with:
          # JMeter test plan to execute
          test-plan-path: './firstlatestjmeterjenkins.jmx'
          # Where to store the results e.g., result.csv
          results-file: ./sanity/result.jtl
          args: "-e -o ./sanity/html"
      - id: set
        run: |
          echo "::set-output name=run_job_b::yes"
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: sanity-results
          path: sanity/result.jtl
          if-no-files-found: error
      - name: Upload HTML Reports
        uses: actions/upload-artifact@v3
        with:
          name: sanity-results
          path: sanity/result.jtl
          if-no-files-found: error
      - name: conditioncheck
        run: |
              awk -F "," 'NR>1{print $8}' sanity/result.jtl >> abc.txt
              TEXT=`cat abc.txt | grep false | wc -l`
              echo "This is $TEXT" 
              if [ ${TEXT} > 3 ]; then
              {
                 echo "Sanity Failed"
                 exit 1  
              }
              else
              {
                echo "Sanity Pass"
                echo "::set-output name=run_job_b::yes"
              }
              fi
    outputs:
      run_job_b: ${{ steps.set.outputs.run_job_b }}

  b:
     name: b
     runs-on: ubuntu-latest
     needs:
       - a
     if: needs.a.outputs.run_job_b == 'yes'
     steps:
      - uses: actions/checkout@v4
      - name: Create load test directory
        run: mkdir loadreport
      - name: LoadTest
        uses: QAInsights/PerfAction@v5.6.2
        with:
          # JMeter test plan to execute
          test-plan-path: './firstlatestjmeterjenkins.jmx'
          # Where to store the results e.g., result.csv
          results-file: ./loadreport/result1.jtl
          args: "-e -o ./loadreport/html"
      #- id: set
        #run: |
          #echo "::set-output name=run_job_b::yes"
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: LoadTest-results
          path: loadreport/result1.jtl
          if-no-files-found: error
      - name: Upload HTML Reports
        uses: actions/upload-artifact@v3
        with:
          name: LoadTest-results
          path: loadreport/result1.jtl
          if-no-files-found: error


      - name: Send mail
        uses: dawidd6/action-send-mail@v3
        with:
          # Specify connection via URL (replaces server_address, server_port, secure,
          # username and password)
          #
          # Format:
          #
          #  * smtp://user:password@smtp.gmail:456
          #  * smtp+starttls://user:password@server:port
          connection_url: ${{secrets.MAIL_CONNECTION}}
          # Required mail server address if not connection_url:
          server_address: smtp.gmail.com
          # Server port, default 25:
          server_port: 465
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Optional (recommended) mail server username:
          username: donotreply.testresults@gmail.com
          # Optional (recommended) mail server password:
          password: zjamxgxmzjlsivtp
          # Required mail subject:
          subject: Load Test Status || ${{github.repository}} Results
          # Required recipients' addresses:
          to: chirag.mathur@telus.com
          # Required sender full name (address can be skipped):
          from: PerformanceResults@telus.com # <user@example.com>
          # Optional plain body:
          body: |
            Hi Team, 
            
            Build job of ${{github.repository}} completed successfully! 
            
            Thanks and Regards
            Performance Testing Team
         # Optional HTML body read from file:
         # html_body: file://reports/html/index.html
          # Optional carbon copy recipients:
          #cc: ${{vars.CC_EMAIL}}
          # Optional blind carbon copy recipients:
         # bcc: r2d2@example.com,hansolo@example.com
          # Optional recipient of the email response:
          #reply_to: luke@example.com
          # Optional Message ID this message is replying to:
          #in_reply_to: <random-luke@example.com>
          # Optional unsigned/invalid certificates allowance:
          #ignore_cert: true
          #contentType: text/html
          # Optional converting Markdown to HTML (set content_type to text/html too):
          #convert_markdown: true
          # Optional attachments:
          #attachments: sreports/result.jtl
          #attachments: '[{"path":"reports/result.jtl"}]'
          # Optional priority: 'high', 'normal' (default) or 'low'
          #priority: low
          # Optional nodemailerlog: true/false
          #nodemailerlog: false
          # Optional nodemailerdebug: true/false if true lognodem will also be set true
          #nodemailerdebug: false
