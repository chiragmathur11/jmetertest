# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  job1:
    name: job1
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
        run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - uses: actions/checkout@v4
      - name: Create sanity directory
        run: mkdir sanity
      - name: Sanity
        # You may pin to the exact commit or the version.
        # uses: QAInsights/PerfAction@5a3c503bff845dd019d4b6e30d71f4585494a2ea
        uses: QAInsights/PerfAction@v5.6.2
        with:
          # JMeter test plan to execute
          test-plan-path: './firstlatestjmeterjenkins.jmx'
          # Where to store the results e.g., result.csv
          results-file: ./sanity/result.jtl
          args: "-e -o ./sanity/html"
          #args: "-H 198.161.14.25 -P 8080"

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-resultss
          path: sanity/result.jtl
          if-no-files-found: error

      - name: Upload HTML Reports
        uses: actions/upload-artifact@v3
        with:
          name: jmeter-resultss
          path: sanity/result.jtl
          if-no-files-found: error

      - name: Read result.jtl
        id: package
        uses: juliangruber/read-file-action@v1
        with:
          path: sanity/result.jtl
      - name: Echo result.jtl
        run: echo "${{ steps.package.outputs.content }}" 


      - name: conditioncheck
        run: |
          #$file = "sanity/result.jtl"
          #$content = Get-Content $file
          #echo "$content"
              awk -F "," 'NR>1{print $8}' sanity/result.jtl >> abc.txt
              TEXT=`cat abc.txt | grep false | wc -l`
              echo "This is $TEXT" 
              #if [$TEXT > 1]
      - name: if condition
        if: $TEXT > 1
        run: |
              echo "reach"
              echo "::set-output name=run_jobs::true"
             # else
             # echo "reach 1"
             # echo "::set-output name=run_jobs::false"
             # fi
              #if: github.repository == 'octo-org/octo-repo-prod'

      #- if: "!contains($Text, '0')"
       # steps:
        # - name: condition 1
         #  if: "contains($Text, '1')"
          # run: echo "This is line 1"
         #- name: condition 2
           #if: "contains($Text, '2')"
          # run: echo "There is two error"

      #- if: $TEXT < 1
       # name: IF
       # run: |
          #   echo "line 1"
           #  echo "::set-output name=run_jobs::true"
        
              
  job2:
    name: Job 2
    needs: job1
    if: needs.job1.outputs.run_rest_jobs == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: the rest jobs
      run: echo "run the rest jobs"
